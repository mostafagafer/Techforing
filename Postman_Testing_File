swagger: '2.0'
info:
  title: Techforing API
  description: API documentation
  termsOfService: https://www.google.com/policies/terms/
  contact:
    email: contact@snippets.local
  license:
    name: BSD License
  version: v1
host: 127.0.0.1:8000
schemes:
- http
basePath: /api
consumes:
- application/json
produces:
- application/json
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
security:
- Bearer: []
paths:
  /comments/:
    get:
      operationId: comments_list
      description: Retrieve a list of all comments.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
      tags:
      - comments
    post:
      operationId: comments_create
      description: Create a new comment.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Comment'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Comment'
      tags:
      - comments
    parameters: []
  /comments/{id}/:
    get:
      operationId: comments_read
      description: Retrieve details of a specific comment.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Comment'
      tags:
      - comments
    put:
      operationId: comments_update
      description: Update an existing comment.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Comment'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Comment'
      tags:
      - comments
    patch:
      operationId: comments_partial_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Comment'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Comment'
      tags:
      - comments
    delete:
      operationId: comments_delete
      description: Delete a comment.
      parameters: []
      responses:
        '204':
          description: No Content
      tags:
      - comments
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this comment.
      required: true
      type: integer
  /login/:
    post:
      operationId: login_create
      description: Authenticate a user and generate a token.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Login'
      responses:
        '200':
          description: Token generated successfully
        '400':
          description: Invalid credentials or missing fields
      tags:
      - login
    parameters: []
  /projects/:
    get:
      operationId: projects_list
      description: Retrieve a list of all projects.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
      tags:
      - projects
    post:
      operationId: projects_create
      description: Create a new project. The authenticated user will be the owner
        and Admin.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Project'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Project'
      tags:
      - projects
    parameters: []
  /projects/{id}/:
    get:
      operationId: projects_read
      description: Retrieve details of a specific project.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Project'
      tags:
      - projects
    put:
      operationId: projects_update
      description: Update an existing project. Only Admins can perform this action.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Project'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Project'
      tags:
      - projects
    patch:
      operationId: projects_partial_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Project'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Project'
      tags:
      - projects
    delete:
      operationId: projects_delete
      description: Delete a project. Only Admins can perform this action.
      parameters: []
      responses:
        '204':
          description: No Content
      tags:
      - projects
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this project.
      required: true
      type: integer
  /register/:
    post:
      operationId: register_create
      description: Register a new user.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/User'
      tags:
      - register
    parameters: []
  /tasks/:
    get:
      operationId: tasks_list
      description: Retrieve a list of all tasks.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
      tags:
      - tasks
    post:
      operationId: tasks_create
      description: Create a new task.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Task'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Task'
      tags:
      - tasks
    parameters: []
  /tasks/{id}/:
    get:
      operationId: tasks_read
      description: Retrieve details of a specific task.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Task'
      tags:
      - tasks
    put:
      operationId: tasks_update
      description: Update an existing task.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Task'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Task'
      tags:
      - tasks
    patch:
      operationId: tasks_partial_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/Task'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Task'
      tags:
      - tasks
    delete:
      operationId: tasks_delete
      description: Delete a task.
      parameters: []
      responses:
        '204':
          description: No Content
      tags:
      - tasks
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this task.
      required: true
      type: integer
  /users/:
    get:
      operationId: users_list
      description: Retrieve a list of all users.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      tags:
      - users
    post:
      operationId: users_create
      description: Create a new user.
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/User'
      tags:
      - users
    parameters: []
  /users/{id}/:
    get:
      operationId: users_read
      description: Retrieve details of a specific user.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/User'
      tags:
      - users
    put:
      operationId: users_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/User'
      tags:
      - users
    patch:
      operationId: users_partial_update
      description: ''
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/User'
      tags:
      - users
    delete:
      operationId: users_delete
      description: ''
      parameters: []
      responses:
        '204':
          description: ''
      tags:
      - users
    parameters:
    - name: id
      in: path
      description: A unique integer value identifying this user.
      required: true
      type: integer
definitions:
  Comment:
    required:
    - content
    - task
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      content:
        title: Content
        type: string
        minLength: 1
      user:
        title: User
        type: string
        readOnly: true
      task:
        title: Task
        type: integer
      created_at:
        title: Created at
        type: string
        format: date-time
        readOnly: true
  Login:
    required:
    - username
    - password
    type: object
    properties:
      username:
        title: Username
        type: string
        minLength: 1
      password:
        title: Password
        type: string
        minLength: 1
  ProjectMember:
    required:
    - user
    - role
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      user:
        title: User
        type: integer
      role:
        title: Role
        type: string
        enum:
        - Admin
        - Member
  Project:
    required:
    - name
    - description
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      name:
        title: Name
        type: string
        maxLength: 255
        minLength: 1
      description:
        title: Description
        type: string
        minLength: 1
      owner:
        title: Owner
        type: string
        readOnly: true
      members:
        type: array
        items:
          $ref: '#/definitions/ProjectMember'
  User:
    required:
    - username
    - password
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      username:
        title: Username
        description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
          only.
        type: string
        pattern: ^[\w.@+-]+$
        maxLength: 150
        minLength: 1
      email:
        title: Email address
        type: string
        format: email
        maxLength: 254
      password:
        title: Password
        type: string
        maxLength: 128
        minLength: 1
      first_name:
        title: First name
        type: string
        maxLength: 150
      last_name:
        title: Last name
        type: string
        maxLength: 150
  Task:
    required:
    - title
    - description
    - assigned_to
    - project
    - due_date
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      title:
        title: Title
        type: string
        maxLength: 255
        minLength: 1
      description:
        title: Description
        type: string
        minLength: 1
      status:
        title: Status
        type: string
        enum:
        - To Do
        - In Progress
        - Done
      priority:
        title: Priority
        type: string
        enum:
        - Low
        - Medium
        - High
      assigned_to:
        title: Assigned to
        type: integer
        x-nullable: true
      project:
        title: Project
        type: integer
      created_at:
        title: Created at
        type: string
        format: date-time
        readOnly: true
      due_date:
        title: Due date
        type: string
        format: date-time
